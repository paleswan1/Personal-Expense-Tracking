@page "/dashboard"
@using Cashify.Application.DTOs.Dashboard


<div class="p-2 font-poppins">

    <div class="relative w-full bg-slate-600 h-[26vh] rounded-xl">
        <img src="images/Dashboard.jpg" alt="dashboard" class="w-full h-full object-cover rounded-xl brightness-90">

        <div class="absolute top-10 px-4">           
            <h2 class="text-2xl font-semibold text-white">Expense Distribution</h2>
        </div>

        <div class="absolute bottom-3 w-full grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-4 p-2">
            <div class="flex flex-row justify-between rounded-lg bg-white p-3 shadow-md">
                <div class="">
                    <p class="text-gray-500">Total Inflows</p>
                    <p class="text-gray-500 text-[12px]">Credits (@DashboardCount.TotalInflowsCount)</p>
                    <h2 class="text-2xl font-bold">@DashboardCount.TotalInflowsAmount.ToString("C")</h2>
                </div>
                <div class="rounded-full size-4">
                    <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Color="Color.Warning" />
                </div>
            </div>
            <div class="flex flex-row justify-between rounded-lg bg-white p-3 shadow-md">
                <div class="">
                    <p class="text-gray-500">Total Outflows</p>
                    <p class="text-gray-500 text-[12px]">Debits (@DashboardCount.TotalOutflowsCount)</p>
                    <h2 class="text-2xl font-bold">@DashboardCount.TotalOutflowsAmount.ToString("C")</h2>
                </div>
                <div class="rounded-full size-4">
                    <MudIcon Icon="@Icons.Material.Filled.MoneyOff" Class="text-3xl" style="color: #63b3ed;" />
                </div>
            </div>
              <div class="flex flex-row justify-between rounded-lg bg-white p-3 shadow-md">
                <div class="">
                    <p class="text-gray-500">Total Pending Debts</p>
                    <p class="text-gray-500 text-[12px]">Pending Debts (@DashboardCount.TotalPendingDebtsCount)</p>
                    <h2 class="text-2xl font-bold">@DashboardCount.TotalPendingDebtsAmount.ToString("C")</h2>
                </div>
                <div class="rounded-full size-4">
                    <MudIcon Icon="@Icons.Material.Filled.CreditCardOff" Color="Color.Error" Class="text-3xl" />
                </div>
            </div>
            <div class="flex flex-row justify-between rounded-lg bg-white p-3 shadow-md">
                <div class="">
                    <p class="text-gray-500">Total Cleared Debts</p>
                    <p class="text-gray-500 text-[12px]">Cleared Debt (@DashboardCount.TotalClearedDebtsCount)</p>
                    <h2 class="text-2xl font-bold">  @DashboardCount.TotalClearedDebtsAmount.ToString("C")</h2>
                </div>
                <div class="rounded-full size-4">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="text-3xl" style="color: #c770d5;" />
                </div>
            </div>
        </div>

    </div>


    <!-- Dashboard Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 mt-6">
        <div class="bg-white p-6 rounded-lg border border-gray-200">
                <div class="d-flex mb-4 gap-3">
                    <div class="filter d-flex justify-content-between align-items-center mb-4 gap-3 flex-wrap">
                      <div class="filter d-flex justify-content-between align-items-center mb-4 gap-3 flex-wrap">
                        <MudText Typo="Typo.h6" HtmlTag="h1" Color="Color.Inherit" Class="topbar-text ms-2">
                                Inflows
                            </MudText>
                            <Filter OnFilterApplication="GetInflowsTransactionDetails">
                                <MudTextField @bind-Value="InflowsFilter.Count"
                                              Label="Record Count"
                                              For="@(() => InflowsFilter.Count)"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Number"
                                              Placeholder="Enter your count limit"
                                              Immediate="true" />
                                <MudRadioGroup @bind-Value="InflowsFilter.IsAscending">
                                    <MudRadio Value="true" Color="Color.Primary" Dense="true">Lowest</MudRadio>
                                    <MudRadio Value="false" Color="Color.Secondary" Dense="false">Highest</MudRadio>
                                </MudRadioGroup>
                                <MudRadioGroup @bind-Value="InflowsFilter.IsDisplayedAsBarChart">
                                    <MudRadio Value="true" Color="Color.Primary" Dense="true">Bar Chart</MudRadio>
                                    <MudRadio Value="false" Color="Color.Secondary" Dense="false">Doughnut Chart</MudRadio>
                                </MudRadioGroup>
                            </Filter>
                        </div>
                    </div>
                </div>
                <div class="row">
                    @if (InflowsFilter.IsDisplayedAsBarChart)
                    {
                        <BarChart T="GetTransactionDetails"
                                  Items="InflowsData"
                                  Title="Inflow Transactions"
                                  Height="170"
                                  MaxYValue="5"
                                  Width="500"
                                  XValue="@(e => e.Title)"
                                  YValue="@(e => e.Sum(z => z.Amount))" />
                    }
                    else
                    {
                        <DonutChart T="GetTransactionDetails"
                                    Items="InflowsData"
                                    XValue="@(e => e.Title)"
                                    YValue="@(e => e.Amount)" />
                    }
                </div>
        </div>
        <div class="bg-white p-6 rounded-lg border border-gray-200">
                <div class="d-flex mb-4 gap-3">
                    <div class="filter d-flex justify-content-between align-items-center mb-4 gap-3 flex-wrap">
                        <div class="filter-left d-flex align-items-center gap-x-2">
                            <MudText Typo="Typo.h6" HtmlTag="h1" Color="Color.Inherit" Class="topbar-text ms-2">
                                Outflows
                            </MudText>
                            <Filter OnFilterApplication="GetOutflowsTransactionDetails">
                                <MudTextField @bind-Value="OutflowsFilter.Count"
                                              Label="Record Count"
                                              For="@(() => OutflowsFilter.Count)"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Number"
                                              Placeholder="Enter your count limit"
                                              Immediate="true" />
                                <MudRadioGroup @bind-Value="OutflowsFilter.IsAscending">
                                    <MudRadio Value="true" Color="Color.Primary" Dense="true">Lowest</MudRadio>
                                    <MudRadio Value="false" Color="Color.Secondary" Dense="false">Highest</MudRadio>
                                </MudRadioGroup>
                                <MudRadioGroup @bind-Value="OutflowsFilter.IsDisplayedAsBarChart">
                                    <MudRadio Value="true" Color="Color.Primary" Dense="true">Bar Chart</MudRadio>
                                    <MudRadio Value="false" Color="Color.Secondary" Dense="false">Doughnut Chart</MudRadio>
                                </MudRadioGroup>
                            </Filter>
                        </div>
                    </div>
                </div>
                <div class="row">
                    @if (OutflowsFilter.IsDisplayedAsBarChart)
                    {
                        <BarChart T="GetTransactionDetails"
                                  Items="OutflowsData"
                                  Title="Out Transactions"
                                  Height="170"
                                  MaxYValue="5"
                                  Width="500"
                                  XValue="@(e => e.Title)"
                                  YValue="@(e => e.Sum(z => z.Amount))" />
                    }
                    else
                    {
                        <DonutChart T="GetTransactionDetails"
                                    Items="OutflowsData"
                                    XValue="@(e => e.Title)"
                                    YValue="@(e => e.Amount)" />
                    }
                </div>
        </div>
        <div class="bg-white p-6 rounded-lg border border-gray-200">
                <div class="d-flex mb-4 gap-3">
                    <div class="filter d-flex justify-content-between align-items-center mb-4 gap-3 flex-wrap mx-2">
                        <div class="filter-left d-flex align-items-center gap-x-2">
                            <MudText Typo="Typo.h6" HtmlTag="h1" Color="Color.Inherit" Class="topbar-text ms-2">
                                Debts
                            </MudText>
                            <Filter OnFilterApplication="GetDebtsTransactionDetails">
                                <MudTextField @bind-Value="DebtsFilter.Count"
                                              Label="Record Count"
                                              For="@(() => DebtsFilter.Count)"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Number"
                                              Placeholder="Enter your count limit"
                                              Immediate="true" />
                                <MudRadioGroup @bind-Value="DebtsFilter.IsAscending">
                                    <MudRadio Value="true" Color="Color.Primary" Dense="true">Lowest</MudRadio>
                                    <MudRadio Value="false" Color="Color.Secondary" Dense="false">Highest</MudRadio>
                                </MudRadioGroup>
                                <MudRadioGroup @bind-Value="DebtsFilter.IsDisplayedAsBarChart">
                                    <MudRadio Value="true" Color="Color.Primary" Dense="true">Bar Chart</MudRadio>
                                    <MudRadio Value="false" Color="Color.Secondary" Dense="false">Doughnut Chart</MudRadio>
                                </MudRadioGroup>
                            </Filter>
                        </div>
                    </div>
                </div>
                <div class="row">
                    @if (DebtsFilter.IsDisplayedAsBarChart)
                    {
                        <BarChart T="GetTransactionDetails"
                                  Items="DebtsData"
                                  Title="Debts Transactions"
                                  Height="170"
                                  MaxYValue="5"
                                  Width="500"
                                  XValue="@(e => e.Title)"
                                  YValue="@(e => e.Sum(z => z.Amount))" />
                    }
                    else
                    {
                        <DonutChart T="GetTransactionDetails"
                                    Items="DebtsData"
                                    XValue="@(e => e.Title)"
                                    YValue="@(e => e.Amount)" />
                    }
                </div>
        </div>

    </div>

    <div class="inner-padding mb-4">
        <div class="table-responsive">
            <table class="table country-table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th @onclick="() => ChangeSorting(nameof(DebtModel.Title))" style="cursor: pointer;">
                            Title
                            <MudIcon Icon="@GetSortIcon(nameof(DebtModel.Title))" Class="ms-1" />
                        </th>
                        <th @onclick="() => ChangeSorting(nameof(DebtModel.Amount))" style="cursor: pointer;">
                            Amount
                            <MudIcon Icon="@GetSortIcon(nameof(DebtModel.Amount))" Class="ms-1" />
                        </th>
                        <th>Source</th>
                        <th>Status</th>
                        <th @onclick="() => ChangeSorting(nameof(DebtModel.DueDate))" style="cursor: pointer;">
                            Due Date
                            <MudIcon Icon="@GetSortIcon(nameof(DebtModel.DueDate))" Class="ms-1" />
                        </th>
                        <th @onclick="() => ChangeSorting(nameof(DebtModel.ClearedDate))" style="cursor: pointer;">
                            Cleared Date
                            <MudIcon Icon="@GetSortIcon(nameof(DebtModel.ClearedDate))" Class="ms-1" />
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in PendingDebts)
                    {
                        <tr>
                            <td>@(PendingDebts.IndexOf(debt) + 1).</td>
                            <td>@debt.Title</td>
                            <td>@debt.Amount.ToString("C")</td>
                            <td>@debt.Source.Title</td>
                            <td>
                                @if (debt.Status != DebtStatus.Cleared)
                                {
                                    switch (debt.Status)
                                    {
                                        case DebtStatus.Pending:
                                            <MudChip T="string" Variant="Variant.Outlined" Class="status" Color="Color.Warning">
                                                <span>Pending</span>
                                            </MudChip>
                                            break;
                                        case DebtStatus.Overdue:
                                            <MudChip T="string" Variant="Variant.Outlined" Class="status" Color="Color.Error">
                                                <span>Overdue</span>
                                            </MudChip>
                                            break;
                                    }
                                }
                                else
                                {
                                    <MudChip T="string" Variant="Variant.Outlined" Class="status" Color="Color.Success">
                                        <span>Cleared</span>
                                    </MudChip>
                                }
                            </td>
                            <td>@debt.DueDate</td>
                            <td>@debt.ClearedDate</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

</div>
